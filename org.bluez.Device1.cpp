/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -a org.bluez.Device1 -c OrgBluezDevice1 -N xml/org.bluez.Device1.xml
 *
 * qdbusxml2cpp is Copyright (C) 2015 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "org.bluez.Device1.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class OrgBluezDevice1
 */

OrgBluezDevice1::OrgBluezDevice1(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

OrgBluezDevice1::~OrgBluezDevice1()
{
    // destructor
}

QDBusObjectPath OrgBluezDevice1::adapter() const
{
    // get the value of property Adapter
    return qvariant_cast< QDBusObjectPath >(parent()->property("Adapter"));
}

QString OrgBluezDevice1::address() const
{
    // get the value of property Address
    return qvariant_cast< QString >(parent()->property("Address"));
}

QString OrgBluezDevice1::alias() const
{
    // get the value of property Alias
    return qvariant_cast< QString >(parent()->property("Alias"));
}

void OrgBluezDevice1::setAlias(const QString &value)
{
    // set the value of property Alias
    parent()->setProperty("Alias", QVariant::fromValue(value));
}

ushort OrgBluezDevice1::appearance() const
{
    // get the value of property Appearance
    return qvariant_cast< ushort >(parent()->property("Appearance"));
}

bool OrgBluezDevice1::blocked() const
{
    // get the value of property Blocked
    return qvariant_cast< bool >(parent()->property("Blocked"));
}

void OrgBluezDevice1::setBlocked(bool value)
{
    // set the value of property Blocked
    parent()->setProperty("Blocked", QVariant::fromValue(value));
}

uint OrgBluezDevice1::clazz() const
{
    // get the value of property Class
    return qvariant_cast< uint >(parent()->property("Class"));
}

bool OrgBluezDevice1::connected() const
{
    // get the value of property Connected
    return qvariant_cast< bool >(parent()->property("Connected"));
}

QString OrgBluezDevice1::icon() const
{
    // get the value of property Icon
    return qvariant_cast< QString >(parent()->property("Icon"));
}

bool OrgBluezDevice1::legacyPairing() const
{
    // get the value of property LegacyPairing
    return qvariant_cast< bool >(parent()->property("LegacyPairing"));
}

QString OrgBluezDevice1::modalias() const
{
    // get the value of property Modalias
    return qvariant_cast< QString >(parent()->property("Modalias"));
}

QString OrgBluezDevice1::name() const
{
    // get the value of property Name
    return qvariant_cast< QString >(parent()->property("Name"));
}

bool OrgBluezDevice1::paired() const
{
    // get the value of property Paired
    return qvariant_cast< bool >(parent()->property("Paired"));
}

short OrgBluezDevice1::rSSI() const
{
    // get the value of property RSSI
    return qvariant_cast< short >(parent()->property("RSSI"));
}

bool OrgBluezDevice1::trusted() const
{
    // get the value of property Trusted
    return qvariant_cast< bool >(parent()->property("Trusted"));
}

void OrgBluezDevice1::setTrusted(bool value)
{
    // set the value of property Trusted
    parent()->setProperty("Trusted", QVariant::fromValue(value));
}

QStringList OrgBluezDevice1::uUIDs() const
{
    // get the value of property UUIDs
    return qvariant_cast< QStringList >(parent()->property("UUIDs"));
}

void OrgBluezDevice1::CancelPairing()
{
    // handle method call org.bluez.Device1.CancelPairing
    QMetaObject::invokeMethod(parent(), "CancelPairing");
}

void OrgBluezDevice1::Connect()
{
    // handle method call org.bluez.Device1.Connect
    QMetaObject::invokeMethod(parent(), "Connect");
}

void OrgBluezDevice1::ConnectProfile(const QString &UUID)
{
    // handle method call org.bluez.Device1.ConnectProfile
    QMetaObject::invokeMethod(parent(), "ConnectProfile", Q_ARG(QString, UUID));
}

void OrgBluezDevice1::Disconnect()
{
    // handle method call org.bluez.Device1.Disconnect
    QMetaObject::invokeMethod(parent(), "Disconnect");
}

void OrgBluezDevice1::DisconnectProfile(const QString &UUID)
{
    // handle method call org.bluez.Device1.DisconnectProfile
    QMetaObject::invokeMethod(parent(), "DisconnectProfile", Q_ARG(QString, UUID));
}

void OrgBluezDevice1::Pair()
{
    // handle method call org.bluez.Device1.Pair
    QMetaObject::invokeMethod(parent(), "Pair");
}

